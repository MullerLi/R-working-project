download.file(url="https://cran.r-project.org/bin/windows/Rtools/rtools40v2-x86_64.exe",destfile = "D:\")
install.packages(c("devtools"))
# installed Rtool from website
devtools::install_github("ldurazo/kaggler")
download.file(url="https://cran.r-project.org/bin/windows/Rtools/rtools40v2-x86_64.exe",destfile = "D:\")
install.packages(c("devtools"))
# installed Rtool from website
devtools::install_github("ldurazo/kaggler")
download.file(url="https://cran.r-project.org/bin/windows/Rtools/rtools40v2-x86_64.exe",destfile = "D:/")
download.file(url="https://cran.r-project.org/bin/windows/Rtools/rtools40v2-x86_64.exe",destfile = "D:/RTOOL")
# installed Rtool from website
devtools::install_github("ldurazo/kaggler")
# installed Rtool from website
devtools::install_github("ldurazo/kaggler")
devtools::install_github("ldurazo/kaggler")、
devtools::install_github("ldurazo/kaggler")
devtools::install_github("ldurazo/kaggler")
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
install.packages(c("devtools"))
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
download.file(url="https://cran.r-project.org/bin/windows/Rtools/rtools40v2-x86_64.exe",destfile = "D:/RTOOL")
# get the data
library(httr)
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv")
setwd("D:/onedrive/TTD-CHL/Rworking/R-working-project/data")
dataset %>% str()
library(magrittr)
dataset %>% str()
dataset <- httr::GET("https://www.kaggle.com/api/v1/competitions/data/download/10445/train.csv")
download.file(dataset$url,temp)
temp <- tempfile()
download.file(dataset$url,temp)
library(readr)
train <- read_csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/train.csv")
headin)
head(train)
train<-read.csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/train.csv")
head(train)
#---------Data Clean----------#
table(train$Street)
?able
?table
?table
view(train)
head(train)
unique(train$street)
unique(train$street)
unique(train$Street)
library(knitr)
library(ggplot2)
library(plyr)
library(dplyr)
library(corrplot)
library(caret)
library(gridExtra)
library(scales)
library(Rmisc)
library(ggrepel)
library(randomForest)
library(psych)
library(xgboost)
library(knitr)
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
invisible(lapply(packages, library, character.only = TRUE))
installed.packages()
rownames(installed.packages())
packages[!installed_packages]
installed_packages <- packages %in% rownames(installed.packages())
packages[!installed_packages]
packages[!installed_packages]
packages[!installed_packages]
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
installed_packages <- packages %in% rownames(installed.packages())
packages[!installed_packages]
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
installed_packages <- packages %in% rownames(installed.packages())
installed_packages
packages[!installed_packages]
x<-c(1:10)
y<-10
x[!y]
x<-c(1:10)
y<-11
x[!y]
y<-2
x[!y]
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
invisible(lapply(packages, library, character.only = TRUE))
packages[!installed_packages]
installed_packages <- packages %in% rownames(installed.packages())
installed_packages
y<-c(T,F,T,T,T,F)
x<-c(1:6)
x[!y]
x[y]
x[!y]
!TRUE
!1
inpackage<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
#---------Data Clean----------#
table(train$Street)
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
dim(train)
# 81 columns/variables with 1460 observation
str(train)
# 81 columns/variables with 1460 observation
train %>% str()
# 81 columns/variables with 1460 observation
train[,c(1:10,81)] %>% str()
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
test[,c(1:10,81)] %>% str()
test %>% str()
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
test$Id <- NULL
train$Id <- NULL
test %>% str()
test$SalePrice <- NA
test$SalePrice
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
test$SalePrice
test$SalePrice <- NA
test$SalePrice
test$SalePrice <- NA #插入一欄 saleprice
all <- rbind(train, test)
dim(all)
all <- rbind(train, test)
colnames(test)
all <- rbind(train, test)
all <- rbind( c(train, test))
dim(all)
all
head(all)
#---------Data Clean----------#
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
dim(train)
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
test$Id <- NULL    #刪除用不到的變數
train$Id <- NULL   #刪除用不到的變數
test$SalePrice <- NA #插入一欄 saleprice
all <- rbind( c(train, test))
dim(all)
#---------Data Clean----------#
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
test$SalePrice <- NA #插入一欄 saleprice
>rbind()
?rbind()
View(test)
View(test)
View(train)
View(train)
all <-rbind( train, test)
dim(all)
head(all)
dim(all)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
all[!is.na(all$SalePrice),]
ggplot(data=all[is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
[!is.na(all$SalePrice),]
ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
summary(all$SalePrice)
is.na(all$SalePrice)
!is.na(all$SalePrice)
is.na(all$SalePrice) == TRUE
is.na(all$SalePrice) == TRUE
sapply(all, is.numeric)
which( sapply(all, is.numeric) )
sapply(all, is.numeric)
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出不屬於數字的變數
numericVarNames <- names(numericVars) #saving names vector for use later on
cat('There are', length(numericVars), 'numeric variables')
paste0('There are', length(numericVars), 'numeric variables')
paste('There are', length(numericVars), 'numeric variables')
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出不屬於數字的變數
all_numVar <- all[, numericVars]
all_numVar <- all[, numericVars]  #數字的column
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出屬於數字的變數
numericVarNames <- names(numericVars) #saving names vector for use later on
cat('There are', length(numericVars), 'numeric variables')
all_numVar <- all[, numericVars]  #數字的變數名
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs") #correlations of all numeric variables
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs") #所有變數做相關分析
cor_numVar
#sort on decreasing correlations with SalePrice
cor_sorted <- as.matrix( sort( cor_numVar[,'SalePrice'], decreasing = TRUE))
cor_sorted
#跟價格相關性從高排到低
cor_sorted <- as.matrix( sort( cor_numVar[,'SalePrice'], decreasing = TRUE))
#選出 r>0.5a
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
CorHigh
apply ( cor_sorted, 1, function(x) abs(x)>0.5)
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
abs
apply ( cor_sorted, 1, function(x) abs(x)>0.5)
spply ( cor_sorted, 1, function(x) abs(x)>0.5)
sapply ( cor_sorted, 1, function(x) abs(x)>0.5)
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
apply ( cor_sorted, 1, function(x) abs(x)>0.5)
which( apply ( cor_sorted, 1, function(x) abs(x)>0.5))
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
#apply用於矩陣，1是垂直方向,２是水平方向
cor_numVar <- cor_numVar[CorHigh, CorHigh]
cor_numVar
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
cor_numVar
cor_numVar[CorHigh, CorHigh]
x[1:10,1:10]
matrix(x[1:10,1:10])
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
corrplot.mixed(cor_numVar)
tl.col="black"
corrplot.mixed(cor_numVar, tl.col="black")
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
?corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
?corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
?corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
corrplot.mixed(cor_numVar, tl.col="black")
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "d")
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "n")
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
all_numVar <- all[, numericVars]  #數字的變數名
as.matrix( sort( cor_numVar[,'SalePrice'], decreasing = TRUE))
names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
library(readr)
train <- read_csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/train.csv")
head(train)
train<-read.csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/train.csv")
head(train)
inPackage<-function(packages){
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){install.packaegs((packages[!installed_packages]))}
invisible(lapply(packages, library, character.only = TRUE))
}
inpackage<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
#---------Data Clean----------#
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
dim(train)
# 81 columns/variables with 1460 observation
train[,c(1:10,81)] %>% str()
library(magrittr)
# 81 columns/variables with 1460 observation
train[,c(1:10,81)] %>% str()
test %>% str()
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
test$Id <- NULL    #刪除用不到的變數 ID
train$Id <- NULL   #刪除用不到的變數 ID
test %>% str()
test$SalePrice <- NA #插入一欄 saleprice
colnames(test)
all <-rbind( train, test)  #兩筆資料對接(垂直合併一起)
dim(all)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
inPackage<-function(packages){
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){install.packaegs((packages[!installed_packages]))}
invisible(lapply(packages, library, character.only = TRUE))
}
inpackage<-c("knitr","ggplot","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
if (any(install.packages == FALSE)){install.packaegs((packages[!installed_packages]))}
invisible(lapply(packages, library, character.only = TRUE))
packages<-c("knitr","ggplot","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
inPackage<-function(packages){
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){install.packaegs((packages[!installed_packages]))}
invisible(lapply(packages, library, character.only = TRUE))
}
packages<-c("knitr","ggplot","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){install.packaegs((packages[!installed_packages]))}
invisible(lapply(packages, library, character.only = TRUE))
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
inPackage<-function(packages){
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){install.packaegs((packages[!installed_packages]))}
invisible(lapply(packages, library, character.only = TRUE))
}
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){
install.packaegs((packages[!installed_packages]))
}
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){
install.packaegs((packages[!installed_packages]))
}
invisible(lapply(packages, library, character.only = TRUE))
inPackage<-function(packages){
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){
install.packaegs((packages[!installed_packages]))
}
invisible(lapply(packages, library, character.only = TRUE))
}
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
\installed_packages <- packages %in% rownames(installed.packages())
installed_packages <- packages %in% rownames(installed.packages())
if (any(install.packages == FALSE)){
install.packaegs((packages[!installed_packages]))
}
install.packaegs((packages[!installed_packages])
install.packaegs((packages[!installed_packages]))
install.packages((packages[!installed_packages]))
(packages[!installed_packages])
installed_packages <- packages %in% rownames(installed.packages())
install.packages((packages[!installed_packages]))
invisible(lapply(packages, library, character.only = TRUE))
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
installed_packages <- packages %in% rownames(installed.packages())
install.packages((packages[!installed_packages]))
invisible(lapply(packages, library, character.only = TRUE))
if any(installed_packages==FALSE{
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages==FALSE){
if (any(installed_packages==FALSE)){
install.packages((packages[!installed_packages]))
}
invisible(lapply(packages, library, character.only = TRUE))
packages<-c("knitr","ggplot2","plyr","dplyr","corrplot","caret","gridExtra","Rmisc","scales","ggrepel","randomForest","psych","xgboost")
inPackage(packages)
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages==FALSE)){
install.packages((packages[!installed_packages]))
}
invisible(lapply(packages, library, character.only = TRUE))
#---------Data Clean----------#
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
dim(train)
# 81 columns/variables with 1460 observation
train[,c(1:10,81)] %>% str()
test %>% str()
# 只留下10個變數跟1個觀測直
test_labels <- test$Id
test$Id <- NULL    #刪除用不到的變數 ID
train$ID
train$ID
#---------Data Clean----------#
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
test %>% str()
train$ID
test$ID
#---------Data Clean----------#
train <- read.csv("../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
#---------Data Clean----------#
train <- read.csv(".../Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
#---------Data Clean----------#
train <- read.csv("/Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
#---------Data Clean----------#
train <- read.csv("/Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
#---------Data Clean----------#
train <- read.csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
dim(train)
test$ID
train$ID
#---------Data Clean----------#
train <- read.csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/train.csv", stringsAsFactors = F)
test <- read.csv("D:/OneDrive/TTD-CHL/Rworking/R-working-project/Kaggle-House Prices - Advanced Regression Techniques/test.csv", stringsAsFactors = F)
train$ID
col.names(test)
colnames(test)
test$Id <- NULL    #刪除用不到的變數 ID
colnames(test)
colnames(train)
train$Id <- NULL   #刪除用不到的變數 ID
colnames(test)
colnames(train)
test %>% str()
test$SalePrice <- NA #插入一欄 saleprice
colnames(test)
all <-rbind( train, test)  #兩筆資料對接(垂直合併一起)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
??ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
?ggplot(data=all[!is.na(all$SalePrice),], aes(x=SalePrice)) +
geom_histogram(fill="blue", binwidth = 10000) +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
summary(all$SalePrice)
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出屬於數字的變數
which( sapply(all, is.numeric)
which( sapply(all, is.numeric) )
which( sapply(all, is.numeric) )
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出屬於數字的變數
numericVars
numericVarNames <- names(numericVars) #saving names vector for use later on
numericVarNames
cat('There are', length(numericVars), 'numeric variables')
numericVars <- which( lapply(all, is.numeric) ) #用WHICH+salppy挑出屬於數字的變數
is.numeric(all )
is.numeric(all)
lapply(all, function(x) is.numeric)
lapply (all, function(x) is.numeric())
lapply (all, function(x) is.numeric(x))
list.names(.data, expr)
rlist::list.names(.data, expr)
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出屬於數字的變數
devtools::install_github("renkun-ken/rlist")
library(rlist)
list.names(.data, expr)
lapply (all, function(x) is.numeric(x)) %>% list.names()
numericVars <- which( sapply(all, is.numeric) ) #用WHICH+salppy挑出屬於數字的變數
numericVarNames <- names(numericVars) #並saving names vector for use later on
cat('There are', length(numericVars), 'numeric variables')
all_numVar <- all[, numericVars]  #數字的變數名
all_numVar
all_numVar <- all[, numericVars]  #選出連續變數資料進行分析
cor_numVar <- cor(all_numVar, use="pairwise.complete.obs") #所有變數做相關分析
cor_numVar
#跟價格相關性從高排到低
cor_sorted <- as.matrix( sort( cor_numVar[,'SalePrice'], decreasing = TRUE))
cor_sorted
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
apply ( cor_sorted, 1, function(x) abs(x)>0.5)
which( apply ( cor_sorted, 1, function(x) abs(x)>0.5))
lapply (all, function(x) is.numeric(x)) %>% names()
cor_numVar <- cor_numVar[CorHigh, CorHigh]
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
#選出 r>0.5a abs為絕對值
CorHigh <- names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
names( which( apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
names( which(! apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
names( which(! apply ( cor_sorted, 1, function(x) abs(x)>0.5)))
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
ggplot(data=all[!is.na(all$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data=all[!is.na(all$SalePrice),], aes(x=GrLivArea, y=SalePrice))+
geom_point(col='blue') + geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1)) +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) +
geom_text_repel(aes(label = ifelse(all$GrLivArea[!is.na(all$SalePrice)]>4500, rownames(all), '')))
all[c(524, 1299), c('SalePrice', 'GrLivArea', 'OverallQual')]
colSums(is.na(all)
colSums(is.na(all))
colSums(is.na(all))
##  5 Missing data, label encoding, and factorizing variables
#確認是否有missing data
NAcol <- which(colSums(is.na(all)) > 0)
NAcol
##  5 Missing data, label encoding, and factorizing variables
#確認是否有missing data
NAcol <- which(colSums(is.na(all)) > 0)
sort(colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
colSums(sapply(all[NAcol], is.na)), decreasing = TRUE
colSums(sapply(all[NAcol], is.na))
sort( colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
##  5 Missing data, label encoding, and factorizing variables
#確認是否有missing data
NAcol <- which(colSums(is.na(all)) > 0)
sort( colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
sapply(all,function(x) is.na)
sapply(all,function(x) is.na)
sapply(all,function(x) is.na(x))
names(sapply(all,function(x) is.na(x)))
colnames(sapply(all,function(x) is.na(x)))
sort( colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
cat('There are', length(NAcol), 'columns with missing values')
